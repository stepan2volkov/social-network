// Package userapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package userapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

const (
	CookieAuthScopes = "cookieAuth.Scopes"
)

// Credentials defines model for Credentials.
type Credentials struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// GetProfileByUsernameResponse defines model for GetProfileByUsernameResponse.
type GetProfileByUsernameResponse = Profile

// LoginRequest defines model for LoginRequest.
type LoginRequest = Credentials

// Profile defines model for Profile.
type Profile struct {
	Biography string             `json:"biography"`
	Birthdate openapi_types.Date `json:"birthdate"`
	City      string             `json:"city"`
	Firstname string             `json:"firstname"`
	Lastname  string             `json:"lastname"`
}

// RegisterRequest defines model for RegisterRequest.
type RegisterRequest struct {
	Biography string             `json:"biography"`
	Birthdate openapi_types.Date `json:"birthdate"`
	City      string             `json:"city"`
	Firstname string             `json:"firstname"`
	Lastname  string             `json:"lastname"`
	Password  string             `json:"password"`
	Username  string             `json:"username"`
}

// RegisterResponse defines model for RegisterResponse.
type RegisterResponse struct {
	ID openapi_types.UUID `json:"id"`
}

// SearchProfilesParams defines parameters for SearchProfiles.
type SearchProfilesParams struct {
	Firstname string `form:"firstname" json:"firstname"`
	Lastname  string `form:"lastname" json:"lastname"`
}

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginRequest

// RegisterJSONRequestBody defines body for Register for application/json ContentType.
type RegisterJSONRequestBody = RegisterRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Log in
	// (POST /api/v1/auth/login)
	Login(w http.ResponseWriter, r *http.Request)
	// Create new user
	// (POST /api/v1/auth/register)
	Register(w http.ResponseWriter, r *http.Request)
	// Search profiles
	// (GET /api/v1/profiles/search)
	SearchProfiles(w http.ResponseWriter, r *http.Request, params SearchProfilesParams)
	// Get user profile
	// (GET /api/v1/profiles/{username})
	GetProfileByUsername(w http.ResponseWriter, r *http.Request, username string)
	// Follow user profile
	// (POST /api/v1/profiles/{username}/follow)
	FollowProfile(w http.ResponseWriter, r *http.Request, username string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Login(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Register operation middleware
func (siw *ServerInterfaceWrapper) Register(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Register(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SearchProfiles operation middleware
func (siw *ServerInterfaceWrapper) SearchProfiles(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchProfilesParams

	// ------------- Required query parameter "firstname" -------------

	if paramValue := r.URL.Query().Get("firstname"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "firstname"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "firstname", r.URL.Query(), &params.Firstname)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "firstname", Err: err})
		return
	}

	// ------------- Required query parameter "lastname" -------------

	if paramValue := r.URL.Query().Get("lastname"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "lastname"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "lastname", r.URL.Query(), &params.Lastname)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "lastname", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SearchProfiles(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetProfileByUsername operation middleware
func (siw *ServerInterfaceWrapper) GetProfileByUsername(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithLocation("simple", false, "username", runtime.ParamLocationPath, chi.URLParam(r, "username"), &username)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProfileByUsername(w, r, username)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FollowProfile operation middleware
func (siw *ServerInterfaceWrapper) FollowProfile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithLocation("simple", false, "username", runtime.ParamLocationPath, chi.URLParam(r, "username"), &username)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FollowProfile(w, r, username)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/auth/login", wrapper.Login)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/auth/register", wrapper.Register)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/profiles/search", wrapper.SearchProfiles)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/profiles/{username}", wrapper.GetProfileByUsername)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/profiles/{username}/follow", wrapper.FollowProfile)
	})

	return r
}

type LoginRequestObject struct {
	Body *LoginJSONRequestBody
}

type LoginResponseObject interface {
	VisitLoginResponse(w http.ResponseWriter) error
}

type Login200ResponseHeaders struct {
	SetCookie string
}

type Login200Response struct {
	Headers Login200ResponseHeaders
}

func (response Login200Response) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)
	return nil
}

type RegisterRequestObject struct {
	Body *RegisterJSONRequestBody
}

type RegisterResponseObject interface {
	VisitRegisterResponse(w http.ResponseWriter) error
}

type Register201JSONResponse RegisterResponse

func (response Register201JSONResponse) VisitRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type SearchProfilesRequestObject struct {
	Params SearchProfilesParams
}

type SearchProfilesResponseObject interface {
	VisitSearchProfilesResponse(w http.ResponseWriter) error
}

type SearchProfiles200JSONResponse []Profile

func (response SearchProfiles200JSONResponse) VisitSearchProfilesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProfileByUsernameRequestObject struct {
	Username string `json:"username"`
}

type GetProfileByUsernameResponseObject interface {
	VisitGetProfileByUsernameResponse(w http.ResponseWriter) error
}

type GetProfileByUsername200JSONResponse GetProfileByUsernameResponse

func (response GetProfileByUsername200JSONResponse) VisitGetProfileByUsernameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProfileByUsername404Response struct {
}

func (response GetProfileByUsername404Response) VisitGetProfileByUsernameResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type FollowProfileRequestObject struct {
	Username string `json:"username"`
}

type FollowProfileResponseObject interface {
	VisitFollowProfileResponse(w http.ResponseWriter) error
}

type FollowProfile200JSONResponse map[string]interface{}

func (response FollowProfile200JSONResponse) VisitFollowProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FollowProfile404Response struct {
}

func (response FollowProfile404Response) VisitFollowProfileResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Log in
	// (POST /api/v1/auth/login)
	Login(ctx context.Context, request LoginRequestObject) (LoginResponseObject, error)
	// Create new user
	// (POST /api/v1/auth/register)
	Register(ctx context.Context, request RegisterRequestObject) (RegisterResponseObject, error)
	// Search profiles
	// (GET /api/v1/profiles/search)
	SearchProfiles(ctx context.Context, request SearchProfilesRequestObject) (SearchProfilesResponseObject, error)
	// Get user profile
	// (GET /api/v1/profiles/{username})
	GetProfileByUsername(ctx context.Context, request GetProfileByUsernameRequestObject) (GetProfileByUsernameResponseObject, error)
	// Follow user profile
	// (POST /api/v1/profiles/{username}/follow)
	FollowProfile(ctx context.Context, request FollowProfileRequestObject) (FollowProfileResponseObject, error)
}

type StrictHandlerFunc func(ctx context.Context, w http.ResponseWriter, r *http.Request, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// Login operation middleware
func (sh *strictHandler) Login(w http.ResponseWriter, r *http.Request) {
	var request LoginRequestObject

	var body LoginJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Login(ctx, request.(LoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Login")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LoginResponseObject); ok {
		if err := validResponse.VisitLoginResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// Register operation middleware
func (sh *strictHandler) Register(w http.ResponseWriter, r *http.Request) {
	var request RegisterRequestObject

	var body RegisterJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Register(ctx, request.(RegisterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Register")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RegisterResponseObject); ok {
		if err := validResponse.VisitRegisterResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// SearchProfiles operation middleware
func (sh *strictHandler) SearchProfiles(w http.ResponseWriter, r *http.Request, params SearchProfilesParams) {
	var request SearchProfilesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SearchProfiles(ctx, request.(SearchProfilesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SearchProfiles")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SearchProfilesResponseObject); ok {
		if err := validResponse.VisitSearchProfilesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetProfileByUsername operation middleware
func (sh *strictHandler) GetProfileByUsername(w http.ResponseWriter, r *http.Request, username string) {
	var request GetProfileByUsernameRequestObject

	request.Username = username

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProfileByUsername(ctx, request.(GetProfileByUsernameRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProfileByUsername")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProfileByUsernameResponseObject); ok {
		if err := validResponse.VisitGetProfileByUsernameResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// FollowProfile operation middleware
func (sh *strictHandler) FollowProfile(w http.ResponseWriter, r *http.Request, username string) {
	var request FollowProfileRequestObject

	request.Username = username

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.FollowProfile(ctx, request.(FollowProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FollowProfile")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(FollowProfileResponseObject); ok {
		if err := validResponse.VisitFollowProfileResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RX307jxhd+ldH8fpc2dgKLWEdIBdpS1G0XkVaViriY2CfOLPaMmTkmsZClbl+hd73o",
	"c/SmfQZ4hT5JNWMnthOHDa24qISE7ZnzZ77vnG9OHmgo00wKEKhp8EB1OIOU2cczBREI5Cyxr5mSGSjk",
	"UL0xredSReYZFizNEqAB1aikiN3VokOxyOoFLmJaOjTXoARLoWuIoHFzd+lQBXc5VxDR4LoxdZrwNysj",
	"OfkAIZoQ54CXSk55AqfF97XNFehMCm3DsiR5P6XB9QP9v4IpDej/vAYEr0bAq13Qsi/EOxlzcQV3ucl7",
	"Z5dtRMub0qHLGBvwTriMFctmRRemC5LwWyCo2D0kCRexQ+aKIxcxCWUEhImIAIZ9uE+4wlnEcA34wdu3",
	"vuvvu4Oj73w/sH8/UodOpUoZ0oBaix53Ice13E5BJVz07Z1ypXGT85MEFn3bE9a3+wcpP1kgTaCWl/bR",
	"nRaw9Rn62L2CmGsE9WKCVzXjvLAQmohNmXYrgq+1GhxEQzic+G4YwdA9GIZvXMbCfdefHO0PDqfDAbw5",
	"ahOZ53yzHx26cGPpVmjTi883EOV9HVY6VEOYK47F2ByoSjCU8pbDSY4zm66gQf2JOrQOoEFrLls1wjL+",
	"NRS0NC65mMrKj0AWWtAhZTyx2ULGxPBeJrfy/rOCiQgWeyo3VEWgQ8UzNG4DeiEQFAvNmyZzjjNiNINk",
	"FS3aBOZo4RvLkLOEfAs4l+qW/PXTL8RIBTm5vKAOvQelK4+DPX/PN4FkBoJlnAZ0f8/fG1gNwpk9uccy",
	"7t0PPJbjzEuMMlj6ZFU5hkRmMrqIaFAJB61ABo2nMiqWhwZRVVqWJTy0Ft4HLUWjyubpuarqiFLZpRJV",
	"DvZDVV8276Hvm38zYBEo+2UM6J5VpHWithS+ovBYMRHJ1K3qaEQuGc6OvRH5YpFxBfrYdBvyFEbkG7Zw",
	"T2I4Pjo88P0R+Qoxey+SYkTGpoRgRMYshTFHOH7HeuSgtOfQeZoyVVT4kUplWKxNhdqCuzGbOjSouqG2",
	"M7FsuVciY11DduJj8Arha0HZQPJMAUMgAua2SZ6FdNlAngamQtvgMfRgOrbLl027ZUyxFNCW13WtCnc5",
	"qKIRhbZod/Fxeivw8dfHPx//ePr49HPffdAfo3UZ7BTit6ePj7/3uL/p76CdGeMIqf4Udc0lspJJpVix",
	"YrCWXgtoW3Svb0x+DcEVGR3xqwleRujn+GE5Z5Vbee6bsLawbVSyIaI1wu1CxJax8N/S8Bz6zw6PFQMH",
	"/oHx0r16aiMiJJKpzEVEX0TWOWDnrvoHbHlTmSRyvl3xvrTrl6sA/xW61seP1+KgwmcHGsrV1/UMlrJr",
	"J3E7Clh3uoHUhjY61TU8B7RjvJmCzMTGpSBsInNct29+lpR/BwAA//8FCAJGvA0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
